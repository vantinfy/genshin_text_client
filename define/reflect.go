package define

const (
	MapRow = 25 // 地图行列
	MapCOL = 45
)

var (
	Map [MapRow][MapCOL]int // 这里二维数组设置为string应该也是可行的 但是后续拓展以及界面的刷新可能不方便
	Ref map[int]string      // 文字映射
)

func init() {
	Ref = map[int]string{
		0:  "  ",
		1:  "我",
		2:  "原",
		3:  "神",
		4:  "像",
		5:  "Ｅ", // 特殊编码字符U+ff25 为了跟汉字一样占相同位宽 下面数字同理
		6:  "Ｑ",
		7:  "魈",
		8:  "旅",
		9:  "行",
		10: "者",
		11: "门",
		12: "路",
		13: "柱",
		14: "点",
		15: "击",
		16: "进",
		17: "入",
		18: "光",
		19: "标",
		20: "０",
		21: "１",
		22: "２",
		23: "３",
		24: "４",
		25: "５",
		26: "６",
		27: "７",
		28: "８",
		29: "９",
	}
	// 登录页面
	Map = [MapRow][MapCOL]int{
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 0, 0, 0, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 13, 13, 0, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 0, 0, 0, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 13, 13, 0, 13, 13, 0, 0, 13, 13, 0, 0, 0, 0, 11, 11, 11, 0, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 13, 13, 0, 13, 13, 0, 0, 13, 13, 0, 0, 0, 11, 11, 11, 11, 11, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 13, 13, 0, 13, 13, 0, 0, 13, 13, 0, 0, 0, 11, 11, 11, 11, 11, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 13, 13, 0, 13, 13, 0, 0, 13, 13, 0, 0, 0, 11, 11, 11, 11, 11, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 13, 13, 0, 13, 13, 0, 0, 13, 13, 0, 0, 0, 11, 11, 11, 11, 11, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 13, 13, 0, 13, 13, 0, 0, 13, 13, 0, 0, 0, 11, 11, 11, 11, 11, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 13, 13, 0, 13, 13, 0, 0, 13, 13, 0, 0, 0, 11, 11, 11, 11, 11, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 13, 13, 0, 13, 13, 0, 0, 13, 13, 0, 0, 0, 11, 11, 11, 11, 11, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 13, 13, 0, 13, 13, 0, 0, 13, 13, 0, 0, 0, 11, 11, 11, 11, 11, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 13, 13, 0, 13, 13, 0, 0, 13, 13, 0, 0, 0, 11, 11, 11, 11, 11, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 13, 13, 0, 13, 13, 0, 0, 13, 13, 0, 0, 0, 12, 12, 12, 12, 12, 0, 0, 13, 13, 0, 0, 0, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 13, 13, 0, 13, 13, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 0, 13, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13},
	}

	// for i := 0; i < MapRow; i++ {
	// 	for j := 0; j < MapCOL; j++ {
	// 		fmt.Print(Ref[Map[i][j]])
	// 	}
	// 	fmt.Println()
	// }
}
